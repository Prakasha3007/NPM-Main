#########################################################################
# Workflow Name : npm
# Description : Install and publish npm packages, or run an npm command."
# Version : v1
#########################################################################

name: npm reusable workflow 
description: npm action testing

inputs:
  command:
    description: 'Specifies the NPM command to be executed. Examples: "install" for installing dependencies'
    required: true
    type: string
  workingDir:
    description: 'Specifies the working directory where the NPM commands will be executed'
    required: true
    type: string
  verbose:
    description: 'Enables verbose output for NPM commands when set to true. Useful for debugging or detailed logging'
    required: false
    type: boolean
  customCommand:
    description: 'Specifies a custom NPM command to be executed. This input is mandatory when the command input is set to "custom".'
    required: false
    type: string
  customRegistry:
    description: 'Specifies a custom NPM registry URL. If provided, this registry will be configured in the .npmrc file before executing commands'
    required: false
    type: string
  nexus_username:
    description: 'Specifies the username for authentication with the custom NPM registry'
    required: false
    type: string
  nexus_password:
    description: 'Specifies the password for authentication with the custom NPM registry'
    required: false
    type: string  

  SourceFolder:
    description: 'Source folder path'
    required: true
    type: string
  TargetFolder:
    description: 'Target folder path'
    required: true
    type: string
  contents:
    description: 'Contents to copy (minimatch patterns)'
    required: false
    type: string
    default: '**'
  CleanTargetFolder:
    description: 'Clean target folder before copying'
    required: false
    type: boolean
    default: false
  overwrite:
    description: 'Overwrite files in the target folder'
    required: false
    type: boolean
    default: false
  FlattenFolders:
    description: 'Flatten folder structure'
    required: false
    type: boolean
    default: false
  preserveTimestamp:
    description: 'Preserve target timestamp during copy'
    required: false
    type: boolean
    default: false
  retryCount:
    description: 'Retry count for copying files'
    required: false
    type: string
    default: '0'
  delayBetweenRetries:
    description: 'Delay between retries in milliseconds'
    required: false
    type: string
    default: '1000'
  ignoreMakeDirErrors:
    description: 'Ignore errors during creation of target folder'
    required: false
    type: boolean
    default: false  

runs:
  using: 'composite'
#  defaults:
#   run:
#     working-directory: ${{ inputs.workingDir }}
  steps:     
    - name: Display Nexus Username and Password
      shell: pwsh
      run: |
        Write-Host "Nexus Username: ${{ inputs.nexus_username }}"
        Write-Host "Nexus Password: ${{ inputs.nexus_password }}"
      
    - name: NPM Task Header
      shell: pwsh
      run: |
          # Task Header
          Write-Host "======================================================================="
          Write-Host "Task        : npm"
          Write-Host "Description : Install and publish npm packages, or run an npm command."
          Write-Host "Version     : v1"
          Write-Host "======================================================================="
        
      # Configure NPM for Custom Registry using PowerShell
    - name: Configure NPM for Custom Registry
      working-directory: ${{ inputs.workingDir }}
      if: ${{ inputs.customRegistry != '' }}
      shell: pwsh
      run: |
        try {
            # Set the custom registry URL
            Write-Host "Setting NPM registry to ${{ inputs.customRegistry }}"
            npm config set registry="${{ inputs.customRegistry }}"
  
            # Set the username and password for the registry
            Write-Host "Setting username and password for ${{ inputs.customRegistry }}"
    
            # Display the current NPM configuration
            npm config ls
            Write-Host "NPM configuration completed successfully."
          
        } catch {
            Write-Error "An error occurred while configuring NPM: $_"
            exit 1
        }
  
       
    - name: Run NPM or Custom Command
      shell: pwsh
      working-directory: ${{ inputs.workingDir }}
      run: |
        try {      
          # Validate command is allowed
          $allowedCommands = @("custom", "install", "ci", "publish")
          $inputCommand = "${{ inputs.command }}".Trim()
          $inputcustomCommand = "${{ inputs.customCommand }}".Trim()
          if (-not $allowedCommands.Contains($inputCommand)) {
            Write-Error "Error: Invalid command '$inputCommand'. Allowed commands are: custom, install, ci, publish."
            exit 1
          }
    
          # Prepare the actual npm command
          if ("${{ inputs.command }}" -eq "custom") {
            if ([string]::IsNullOrEmpty($inputcustomCommand)) {
              Write-Error "Error: customCommand input is required when command is 'custom'"
              exit 1
            }
            $cmd = $inputCustomCommand
          } else {
            $cmd = $inputCommand
          }
    
          # Add verbose flag if needed
          if ("${{ inputs.verbose }}" -eq "true") {
            $cmd += " --verbose"
          } 
    
          # Finally, run the command
          Write-Host "Running command: npm $cmd"
          Invoke-Expression "npm $cmd"
        } catch {
          Write-Error "An error occurred while executing the npm logic: $_"
          exit 1
        }

     - name: Task-Header
        run: |
          Write-Host "===================================================================================================="
          Write-Host "Task        : Copy files"
          Write-Host "Description : copy files from a source folder to a target folder using match patterns."
          Write-Host "Version     : V2"
          Write-Host "Author      : Dinesh"
          Write-Host "Help        : https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/copy-files-v2"
          Write-Host "===================================================================================================="          
        shell: pwsh
     - name: Validate - Inputs
        run: |
          Write-Host "Source Folder: ${{ inputs.SourceFolder }}"
          Write-Host "Target Folder: ${{ inputs.TargetFolder }}"
          Write-Host "Contents: ${{ inputs.contents }}"
          Write-Host "Clean Target Folder: ${{ inputs.CleanTargetFolder}}"
          Write-Host "Overwrite: ${{ inputs.overwrite }}"
          Write-Host "Flatten Folders: ${{ inputs.FlattenFolders }}"
          Write-Host "Preserve Timestamp: ${{ inputs.preserveTimestamp }}"
          Write-Host "Retry Count: ${{ inputs.retryCount }}"
          Write-Host "Delay Between Retries: ${{ inputs.delayBetweenRetries }}"
          Write-Host "Ignore MakeDir Errors: ${{ inputs.ignoreMakeDirErrors }}"
        shell: pwsh
      - name: Verify Source Folder
        run: |
          try {
            $source = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.SourceFolder }}"
            Write-Host "Checking if source folder exists: $source"
            if (-Not (Test-Path -Path $source)) {
              Write-Error "Source folder does not exist: $source"
              exit 1
            }
          } catch {
            Write-Error "An error occurred while verifying the source folder: $_"
            exit 1
          }
        shell: pwsh
      - name: Clean Target Folder
        if: ${{ inputs.CleanTargetFolder }}
        run: |
          try {
            $target = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.TargetFolder }}"
            Write-Host "Checking if target folder exists: $target"

            if (Test-Path -Path $target) {
              Write-Host "Target folder exists. Cleaning the folder: $target"
              Remove-Item -Path $target -Recurse -Force
            } else {
              Write-Host "Target folder does not exist. Creating directory: $target"
              New-Item -ItemType Directory -Path $target | Out-Null
            }
          } catch {
            Write-Error "An error occurred while cleaning or creating the target folder: $_"
            exit 1
          }
        shell: pwsh
      - name: Copy Files
        run: |
          try {
            # Task Header
            Write-Host "===================================================================================================="
            Write-Host "Task        : Copy files"
            Write-Host "Description : copy files from a source folder to a target folder using match patterns."
            Write-Host "Version     : V2"
            Write-Host "Author      : Dinesh"
            Write-Host "Help        : https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/copy-files-v2"
            Write-Host "===================================================================================================="
            # Inputs
            $source = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.SourceFolder }}"
            $target = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.TargetFolder }}"
            $contents = "${{ inputs.contents }}"
            $overwrite = if ("${{ inputs.overwrite }}" -eq "true") { $true } else { $false }
            $flatten = if ("${{ inputs.FlattenFolders }}" -eq "true") { $true } else { $false }
            $preserveTimestamp = if ("${{ inputs.preserveTimestamp }}" -eq "true") { $true } else { $false }
            $retryCount = [int]${{ inputs.retryCount }}
            $delayBetweenRetries = [int]${{ inputs.delayBetweenRetries }}
            $ignoreMakeDirErrors = if ("${{ inputs.ignoreMakeDirErrors }}" -eq "true") { $true } else { $false }

            # Write-Host "Source Path: $source"
            # Write-Host "Target Path: $target"
            # Write-Host "Contents to Copy: $contents"
            # Write-Host "Overwrite Enabled: $overwrite"
            # Write-Host "Flatten Folders Enabled: $flatten"
            # Write-Host "Preserve Timestamp Enabled: $preserveTimestamp"
            # Write-Host "Retry Count: $retryCount"
            # Write-Host "Delay Between Retries: $delayBetweenRetries ms"
            # Write-Host "Ignore MakeDir Errors: $ignoreMakeDirErrors"

            if (-not (Test-Path -Path $source)) {
              throw "Source folder does not exist: $source"
            }

            # Create Target Folder if it doesn't exist
            if (-not (Test-Path -Path $target)) {
              # Write-Host "Creating target folder: $target"
              try {
                New-Item -ItemType Directory -Path $target | Out-Null
              } catch {
                if (-not $ignoreMakeDirErrors) {
                  throw $_
                }
              }
            }
            # Get Files to Copy
            $filesToCopy = Get-ChildItem -Path $source -Recurse -Include $contents -File
            $fileCount = $filesToCopy.Count
            Write-Host "Found $fileCount files in the $source to copy."

            # Copy Files
            foreach ($file in $filesToCopy) {
              $sourceFile = $file.FullName
              $destination = if ($flatten) {
                Join-Path -Path $target -ChildPath $file.Name
              } else {
                $relativePath = $file.FullName.Substring($source.Length).TrimStart(@(' ', '/'))
                Join-Path -Path $target -ChildPath $relativePath
              }

               Write-Host "Copying $sourceFile to $destination"

              # Write-Host "Processing file: $sourceFile"
              # Write-Host "Destination Path: $destination"

              $attempt = 0
              while ($attempt -le $retryCount) {
                try {
                  Copy-Item -Path $sourceFile -Destination $destination -Force:$overwrite
                  if ($preserveTimestamp) {
                    $sourceItem = Get-Item -Path $sourceFile
                    Set-ItemProperty -Path $destination -Name LastWriteTime -Value $sourceItem.LastWriteTime
                    Set-ItemProperty -Path $destination -Name CreationTime -Value $sourceItem.CreationTime
                    Write-Host "Timestamps preserved for file: $destination"
                    Write-Host "LastWriteTime: $($sourceItem.LastWriteTime)"
                    Write-Host "CreationTime: $($sourceItem.CreationTime)"
                  }
                  break
                } catch {
                  if ($attempt -eq $retryCount) {
                    throw $_
                  }
                  Write-Host "Retrying copy operation... Attempt: $($attempt + 1)"
                  Start-Sleep -Milliseconds $delayBetweenRetries
                }
                $attempt++
              }
            }

            Write-Host "File copy operation completed successfully."
          } catch {
            Write-Error "An error occurred during the file copy operation: $_"
            exit 1
          }
        shell: pwsh
      - name: List Files in Target Folder
        run: |
          $target = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.TargetFolder }}"
          Write-Host "Listing files in target folder: $target"
          Get-ChildItem -Path $target
        shell: pwsh   
