#########################################################################
# Workflow Name : npm
# Description : Install and publish npm packages, or run an npm command."
# Version : v1
#########################################################################

name: npm reusable workflow 
description: npm action testing

inputs:
  SourceFolder:
    description: 'Source folder path'
    required: true
    type: string
  TargetFolder:
    description: 'Target folder path'
    required: true
    type: string
  contents:
    description: 'Contents to copy (minimatch patterns)'
    required: false
    type: string
    default: '**'
  CleanTargetFolder:
    description: 'Clean target folder before copying'
    required: false
    type: boolean
    default: false
  overwrite:
    description: 'Overwrite files in the target folder'
    required: false
    type: boolean
    default: false
  FlattenFolders:
    description: 'Flatten folder structure'
    required: false
    type: boolean
    default: false
  preserveTimestamp:
    description: 'Preserve target timestamp during copy'
    required: false
    type: boolean
    default: false
  retryCount:
    description: 'Retry count for copying files'
    required: false
    type: string
    default: '0'
  delayBetweenRetries:
    description: 'Delay between retries in milliseconds'
    required: false
    type: string
    default: '1000'
  ignoreMakeDirErrors:
    description: 'Ignore errors during creation of target folder'
    required: false
    type: boolean
    default: false  

runs:
  using: 'composite'
#  defaults:
#   run:
#     working-directory: ${{ inputs.workingDir }}
  steps:     
    - name: Display Nexus Username and Password
      shell: pwsh
      run: |
        Write-Host "Nexus Username: ${{ inputs.nexus_username }}"
        Write-Host "Nexus Password: ${{ inputs.nexus_password }}"
      
    - name: NPM Task Header
      shell: pwsh
      run: |
          # Task Header
          Write-Host "======================================================================="
          Write-Host "Task        : npm"
          Write-Host "Description : Install and publish npm packages, or run an npm command."
          Write-Host "Version     : v1"
          Write-Host "======================================================================="
        
      # Configure NPM for Custom Registry using PowerShell
    - name: Configure NPM for Custom Registry
      working-directory: ${{ inputs.workingDir }}
      if: ${{ inputs.customRegistry != '' }}
      shell: pwsh
      run: |
        try {
            # Set the custom registry URL
            Write-Host "Setting NPM registry to ${{ inputs.customRegistry }}"
            npm config set registry="${{ inputs.customRegistry }}"
  
            # Set the username and password for the registry
            Write-Host "Setting username and password for ${{ inputs.customRegistry }}"
    
            # Display the current NPM configuration
            npm config ls
            Write-Host "NPM configuration completed successfully."
          
        } catch {
            Write-Error "An error occurred while configuring NPM: $_"
            exit 1
        }
  
       
    - name: Run NPM or Custom Command
      shell: pwsh
      working-directory: ${{ inputs.workingDir }}
      run: |
        try {      
          # Validate command is allowed
          $allowedCommands = @("custom", "install", "ci", "publish")
          $inputCommand = "${{ inputs.command }}".Trim()
          $inputcustomCommand = "${{ inputs.customCommand }}".Trim()
          if (-not $allowedCommands.Contains($inputCommand)) {
            Write-Error "Error: Invalid command '$inputCommand'. Allowed commands are: custom, install, ci, publish."
            exit 1
          }
    
          # Prepare the actual npm command
          if ("${{ inputs.command }}" -eq "custom") {
            if ([string]::IsNullOrEmpty($inputcustomCommand)) {
              Write-Error "Error: customCommand input is required when command is 'custom'"
              exit 1
            }
            $cmd = $inputCustomCommand
          } else {
            $cmd = $inputCommand
          }
    
          # Add verbose flag if needed
          if ("${{ inputs.verbose }}" -eq "true") {
            $cmd += " --verbose"
          } 
    
          # Finally, run the command
          Write-Host "Running command: npm $cmd"
          Invoke-Expression "npm $cmd"
        } catch {
          Write-Error "An error occurred while executing the npm logic: $_"
          exit 1
        }
