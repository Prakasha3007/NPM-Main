name: Reusable Setup Node and NPM Workflow

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      command:
        required: true
        type: string
      workingDir:
        required: true
        type: string
        default: "."
      verbose:
        required: false
        type: boolean
        default: false
      customCommand:
        required: false
        type: string
      customRegistry:
        required: false
        type: string

jobs:
  run-nvm:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download NVM for Windows installer
        run: |
          Invoke-WebRequest https://github.com/coreybutler/nvm-windows/releases/download/1.2.2/nvm-noinstall.zip -OutFile nvm-noinstall.zip
          Expand-Archive -Path "nvm-noinstall.zip" -DestinationPath "C:\nvm" -Force
          Copy-Item "$PWD/settings.txt" "C:\nvm\settings.txt" -Force

      - name: Set Environment Variables for NVM
        run: |
          echo "NVM_HOME=C:\nvm" >> $env:GITHUB_ENV
          echo "NVM_SYMLINK=C:\nvm\nodejs" >> $env:GITHUB_ENV
          echo "PATH=C:\nvm;C:\nvm\nodejs;$env:PATH" >> $env:GITHUB_ENV   

      - name: Install Predefined Node Versions
        run: |
          C:\nvm\nvm.exe install 18.20.4
          C:\nvm\nvm.exe install 18.19.1
          C:\nvm\nvm.exe install 18.20.1
          C:\nvm\nvm.exe install 16.13.0
          C:\nvm\nvm.exe install 16.13.1
          C:\nvm\nvm.exe install 16.16.0

      - name: Check and Switch to Existing NVM Version
        shell: powershell
        run: |
          $version = "${{ inputs.version }}".Trim()
          if (-not $version) { 
            Write-Error "Input version is empty. Please provide a valid Node.js version."
            exit 1
          }

          $normalized = $version.TrimStart('v')
          $installed = & nvm list | ForEach-Object {
            ($_ -replace '[*>\s]', '').TrimStart('v')
          } | Where-Object { $_ -match '^\d+\.\d+\.\d+$' }

          Write-Host "Installed versions:"
          $installed | ForEach-Object { Write-Host " - $_" }

          $matches = if ($normalized -like '*`*') {
            $prefix = $normalized.TrimEnd('*')
            $installed | Where-Object { $_ -like "$prefix*" }
          } else {
            $installed | Where-Object { $_ -eq $normalized }
          }

          if (-not $matches) {
            Write-Error "No installed Node.js version matches: $version"
            exit 1
          }

          $selected = $matches | Sort-Object -Descending | Select-Object -First 1
          Write-Host "Using Node.js version: $selected"

          nvm use $selected
          Write-Host "Node.js version in use: $(node -v)"
          echo "node_version=$selected" >> $env:GITHUB_ENV
        
      - name: Install Dependencies
        run: npm install
        shell: cmd

      - name: Configure Custom Registry
        if: ${{ inputs.customRegistry != '' }}
        working-directory: ${{ inputs.workingDir }}
        run: |
          echo registry=${{ inputs.customRegistry }} >> .npmrc
        shell: cmd

      - name: Run NPM or Custom Command
        working-directory: ${{ inputs.workingDir }}
        run: |
          echo Node.js Version After  : && node -v   
          if "${{ inputs.command }}"=="custom" (   
            if "${{ inputs.customCommand }}"=="" (   
              echo Error: customCommand input is required when command is "custom"
              exit 1
            ) else (   
              if "${{ inputs.verbose }}"=="true" ( 
              echo Running Custom Command With verbose : ${{ inputs.customCommand }}
              npm ${{ inputs.customCommand }} --verbose
              )else (   
                echo Running Custom Command: ${{ inputs.customCommand }}
                npm ${{ inputs.customCommand }}
              )
            )
          ) else if "${{ inputs.verbose }}"=="true" (   
            echo Running npm ${{ inputs.command }} --verbose
            npm ${{ inputs.command }} --verbose
          ) else (   
            echo Running npm ${{ inputs.command }}
            npm ${{ inputs.command }}
          )
          echo Node.js Version : && node -v
        shell: cmd
