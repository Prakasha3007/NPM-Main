name: Reusable Nexus Workflow

on:
  workflow_call:
    secrets:
      url:
        description: 'Nexus server URL'
        required: true
      username:
        description: 'Nexus username'
        required: true
      password:
        description: 'Nexus password'
        required: true
    inputs:
      sourcePath:
        description: 'Path to the source files or directory'
        required: true
        type: string
      files:
        description: 'Files to upload (wildcard supported)'
        required: true
        type: string
      remotePath:
        description: 'Remote path in Nexus repository'
        required: true
        type: string
      retry:
        description: 'Number of retries for upload'
        required: true
        type: string

jobs:
  validate-and-upload:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Inputs
        shell: pwsh
        run: |
          # Validate URL
          Write-Host "Checking URL: ${{ secrets.url }}"
          Write-Host "Checking username: ${{ secrets.username }}"
          Write-Host "Checking password: ${{ secrets.password }}"
          if ([string]::IsNullOrWhiteSpace("${{ secrets.url }}")) {
            Write-Error "Error: Nexus URL is empty."
            exit 1
          }

          # Validate Username
          if ([string]::IsNullOrWhiteSpace("${{ secrets.username }}")) {
            Write-Error "Error: Nexus username is empty."
            exit 1
          }

          # Validate Password
          if ([string]::IsNullOrWhiteSpace("${{ secrets.password }}")) {
            Write-Error "Error: Nexus password is empty."
            exit 1
          }

          # Validate SourcePath
          if (-not (Test-Path "${{ inputs.sourcePath }}")) {
            Write-Error "Error: SourcePath '${{ inputs.sourcePath }}' does not exist."
            exit 1
          }

          # Validate Files in SourcePath
          $files = Get-ChildItem -Path "${{ inputs.sourcePath }}" -Filter "${{ inputs.files }}"
          if ($files.Count -eq 0) {
            Write-Error "Error: No files matching '${{ inputs.files }}' found in '${{ inputs.sourcePath }}'."
            exit 1
          }

   
        
      - name: Upload Files to Nexus
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path "${{ inputs.sourcePath }}" -Filter "${{ inputs.files }}"
      
          if ($files.Count -eq 0) {
            Write-Warning "No files found matching the criteria: ${{ inputs.files }}"
            exit 0
          }
      
          foreach ($file in $files) {
            $filePath = $file.FullName
            $fileName = $file.Name
            $remoteUrl = "${{ secrets.url }}/${{ inputs.remotePath }}/$fileName"
            Write-Host "Final URL to upload: $remoteUrl"
      
            try {
              # Define retry count and delay
              $retries = 2
              $retryDelay = 2
      
              # Construct the curl command dynamically with retry options
              $curlCommand = "curl -v -w '%{http_code}' --fail --retry $retries --retry-delay $retryDelay -u ${{ secrets.username }}:${{ secrets.password }} -X PUT $remoteUrl --upload-file $filePath"
              Write-Host "Executing: $curlCommand"
      
              # Capture response
              $response = Invoke-Expression -Command $curlCommand
              Write-Host "Response Code: $response"
      
              if ($response -eq 200 -or $response -eq 201) {
                Write-Host "Successfully uploaded $filePath to $remoteUrl."
              } else {
                Write-Error "Upload failed with HTTP Code $response."
                exit 1
              }
      
            } catch {
              if ($_ -match "401|403") {
                Write-Error "Authentication failed: Invalid username or password."
                exit 1
              } else {
                Write-Error "Upload failed with error: $_"
                exit 1
              }
            }
          }
       
      - name: Completion
        shell: pwsh
        run: |
          Write-Host "All files uploaded successfully to Nexus."
