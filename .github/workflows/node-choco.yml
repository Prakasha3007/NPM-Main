name: Setup Node with NVM on Windows (Reusable)
on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
jobs:
  run-nvm:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
 
      - name: Download NVM for Windows installer
        run: |
          Invoke-WebRequest https://github.com/coreybutler/nvm-windows/releases/download/1.2.2/nvm-noinstall.zip -OutFile nvm-noinstall.zip
          Expand-Archive -Path "nvm-noinstall.zip" -DestinationPath "C:nvm" -Force
          Copy-Item "$PWD/settings.txt" "C:nvmsettings.txt" -Force
 
      - name: Set Environment Variables for NVM
        run: |
          echo "NVM_HOME=C:nvm" >> $env:GITHUB_ENV
          echo "NVM_SYMLINK=C:nvmnodejs" >> $env:GITHUB_ENV
          echo "PATH=C:nvm;C:nvmnodejs;$env:PATH" >> $env:GITHUB_ENV
 
      - name: Install Predefined Node Versions
        run: |
          C:nvmnvm.exe install 18.20.4
          C:nvmnvm.exe install 18.19.1
          C:nvmnvm.exe install 18.20.1
          C:nvmnvm.exe install 16.13.0
          C:nvmnvm.exe install 16.13.1
          C:nvmnvm.exe install 16.16.0
 
      - name: Check and Switch to Installed NVM Version
        shell: powershell
        run: |
          $inputVersion = "${{ inputs.version }}"
          
          if (-not $inputVersion -or $inputVersion.Trim() -eq "") {
            Write-Error " Input version is empty. Please provide a valid Node.js version."
            exit 1
          }
          $normalized = $inputVersion.Trim().TrimStart("v")
          $installedVersions = & nvm list | Where-Object { $_ -match '^s*(v?d+.){2}d+' } | ForEach-Object {
            ($_ -replace '[*>s]', '').TrimStart('v')
          }
          Write-Host " Installed versions via NVM:"
          $installedVersions | ForEach-Object { Write-Host " - $_" }
    
          if ($normalized -like '*`*') {
            $prefix = $normalized.TrimEnd('*')
            $matches = $installedVersions | Where-Object { $_ -like "$prefix*" }
          } else {
            $matches = $installedVersions | Where-Object { $_ -eq $normalized }
          }
          if (-not $matches) {
            Write-Error " No installed Node.js version matches input: $inputVersion"
            exit 1
          }
          $selected = $matches | Sort-Object -Descending | Select-Object -First 1
          Write-Host " Matched installed version: $selected"
          echo "node_version=$selected" >> $env:GITHUB_ENV
          Write-Host " Switching to matched version using NVM..."
          nvm use $selected
          Write-Host " Node.js version in use: $(node -v)"
