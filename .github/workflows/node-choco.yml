name: Setup Node with NVM on Windows (Reusable)
on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
jobs:
  run-nvm:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Download NVM for Windows installer
        run: |
          Invoke-WebRequest https://github.com/coreybutler/nvm-windows/releases/download/1.2.2/nvm-noinstall.zip -OutFile nvm-noinstall.zip
          Expand-Archive -Path "nvm-noinstall.zip" -DestinationPath "C:\nvm" -Force
          Copy-Item "$PWD/settings.txt" "C:\nvm\settings.txt" -Force
      - name: Set Environment Variables for NVM
        run: |
          echo "NVM_HOME=C:\nvm" >> $env:GITHUB_ENV
          echo "NVM_SYMLINK=C:\nvm\nodejs" >> $env:GITHUB_ENV
          #echo "PATH=C:\nvm;C:\nvm\nodejs;$env:PATH" >> $env:GITHUB_ENV
      - name: Install Predefined Node Versions
        run: |
          C:\nvm\nvm.exe install 18.20.4
          C:\nvm\nvm.exe install 18.19.1
          C:\nvm\nvm.exe install 18.20.1
          C:\nvm\nvm.exe install 16.13.0
          C:\nvm\nvm.exe install 16.13.1
          C:\nvm\nvm.exe install 16.16.0
      - name: Check and Switch to Requested Version (from installed)
        shell: powershell
        run: |
          $input = "${{ inputs.version }}".TrimStart("v")
          # Get list of installed versions via nvm
          $installed = & C:\nvm\nvm.exe list | ForEach-Object { $_.Trim() } | Where-Object { $_ -match '^\d' } | ForEach-Object { ($_ -split '\s+')[0] }
          # Wildcard match or exact
          if ($input -like '*`*') {
            $prefix = $input.TrimEnd('*')
            $match = $installed | Where-Object { $_ -like "$prefix*" }
          } else {
            $match = $installed | Where-Object { $_ -eq $input }
          }
          if (-not $match) {
            Write-Error "No matching version found in installed NVM versions for input: $input"
            exit 1
          }
          $selected = $match | Sort-Object -Descending | Select-Object -First 1
          Write-Host "Found installed Node version: $selected"
          echo "node_version=$selected" >> $env:GITHUB_ENV
          Write-Host "Switching to Node version $selected"
          & C:\nvm\nvm.exe use $selected
          node -v
